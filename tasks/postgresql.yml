---
# PostgreSQL installation and configration recipe

# PostgreSQL configuration details
# The default values of pgdata directory are driven from the -D command-line option or PGDATA environment variable.
#---
# Ubuntu 14.04:
# On Ubuntu the default pgdata directory is /var/lib/postgresql/9.3/main, while the config files are in /etc/postgresql/9.3/main.
# Ubuntu uses Upstart as init system, it works both on Docker and VMs. We keep the default behaviour.
# The service is started by default on VMs and we keep it running.
# We start the service on docker containers. It is stopped in the galaxy-startup recipe.
#---
# CentOS 7:
# On CentOS 7 the default pgdata directory is /var/lib/pgsql/data. CentOS 7 uses Systemd as init system.
# But it works only on VMs, therefore we use pg_ctl to start it on docker containers.
# The database cluster needs to be created via initdb command and started. The database configuration has to be modified, too.
# We use pg_ctl command to init and start the service. PostgreSQl will be stopped in the galaxy-startup recipe.

#---
# CentOS 7

- name: Install postgresql on CentOS7
  yum: name={{item}}
       state=present
  with_items:
    - postgresql-server
    - postgresql-contrib
    - python-psycopg2
  become_user: root
  become_method: sudo
  when: ansible_os_family == "RedHat"

- name: Set pg_ctl path on CentOS7
  set_fact: pg_ctl_path="/usr/bin"
  when: ansible_os_family == "RedHat"

#---
# Ubuntu 14.04

- name: Install postgresql on Ubuntu
  apt: name={{item}}
       state=present
  with_items:
    - postgresql-9.3
    - postgresql-contrib-9.3
    - python-psycopg2
  become_user: root
  become_method: sudo
  when: ansible_os_family == "Debian"

- name: Set pg_ctl path on Ubuntu
  set_fact: pg_ctl_path="/usr/lib/postgresql/9.3/bin/"
  when: ansible_os_family == "Debian"

#---
# Galaxy pip install

- name: Install Galaxy psycopg2 conditional dependency
  pip:
    name: psycopg2
    extra_args: "--index-url https://wheels.galaxyproject.org/simple/ --log {{galaxy_log_path}}/pip_psycopg2.log"
    virtualenv: "{{galaxy_venv_path}}"
  environment:
    PYTHONPATH: "{{galaxy_install_path}}/lib"
    VIRTUAL_ENV: "{{galaxy_venv_path}}"

#########################################################
# Postgresql configuration and startup

- name: Include postgresql specific variables.
  include_vars: postgresql_vars.yml

#---
# CentOS 7

- name: PostgreSQL initdb creates a new database cluster
  shell: "{{pg_ctl_path}}/pg_ctl -D {{pgsql_pgdata}} initdb"
  args:
    creates: "{{pgsql_pgdata}}/pg_hba.conf"
  become: True
  become_user: postgres
  when: ansible_os_family == "RedHat"

- name: Edit pg_hba.conf IPv4 local connections
  replace: dest=/var/lib/pgsql/data/pg_hba.conf
           regexp="host    all             all             127.0.0.1/32            ident"
           replace="host    all             all             127.0.0.1/32            md5"
  become_user: root
  become_method: sudo
  when: ansible_os_family == "RedHat"

- name: Edit pg_hba.conf IPv6 local connections
  replace: dest=/var/lib/pgsql/data/pg_hba.conf
           regexp="host    all             all             ::1/128                 ident"
           replace="host    all             all             ::1/128                 md5"
  become_user: root
  become_method: sudo
  when: ansible_os_family == "RedHat"

- name: Start PostgreSQL server on CentOS
  shell: "{{pg_ctl_path}}/pg_ctl -D {{pgsql_pgdata}} -w start"
  become: True
  become_user: postgres
  when: ansible_os_family == "RedHat"

#---
# Ubuntu 14.04

- name: Start PostgreSQL server on Ubuntu
  service: name=postgresql state=started enabled=no
  become_user: root
  become_method: sudo
  when: ansible_os_family == "Debian"

#########################################################
# Galaxy database configuration

- name: Create galaxy db random passwd
  command: "/usr/local/bin/pwd-generator -l 20"
  register: galaxy_db_passwd

- name: Create galaxy_database_connection vars, needed in task/galaxy-custom.yml for create_galaxy_user.py
  set_fact: galaxy_database_connection="postgresql://{{galaxy_user}}:{{galaxy_db_passwd.stdout}}@localhost:{{galaxy_db_port}}/{{galaxy_user}}"

- name: Create galaxy_install_database_connection vars.
  set_fact: galaxy_install_database_connection="postgresql://{{galaxy_user}}:{{galaxy_db_passwd.stdout}}@localhost:{{galaxy_db_port}}/galaxy_tools"

- name: Create galaxy db user
  postgresql_user: name={{galaxy_user}}
                   password={{galaxy_db_passwd.stdout}}
  become_user: postgres
  become_method: sudo

- name: Create postgresql galaxy db
  postgresql_db: name={{galaxy_user}}
                 owner={{galaxy_user}}
  become_user: postgres
  become_method: sudo

- name: Create postgresql galaxy_tools db
  postgresql_db: name=galaxy_tools
                 owner={{galaxy_user}}
  become_user: postgres
  become_method: sudo

- name: Set DB galaxy.ini values
  ini_file: dest={{galaxy_config_file}} section={{ item.section }} option={{ item.option }} value="{{ item.value }}"
  with_items:
    - { section: 'app:main', option: 'database_connection', value: "{{galaxy_database_connection}}" }
    - { section: 'app:main', option: 'database_engine_option_server_side_cursors', value: "True" }
    - { section: 'app:main', option: 'install_database_connection', value: "{{galaxy_install_database_connection}}" }
    - { section: 'app:main', option: 'install_database_engine_option_server_side_cursors', value: "True" }

- name: Create Galaxy DB
  command: "{{galaxy_venv_path}}/bin/python {{galaxy_install_path}}/scripts/create_db.py -c {{galaxy_config_file}} chdir={{galaxy_install_path}}/"

- name: Create Galaxy install DB
  command: "{{galaxy_venv_path}}/bin/python {{galaxy_install_path}}/scripts/create_db.py -c {{galaxy_config_file}} install chdir={{galaxy_install_path}}/"

- name: Update Galaxy DB
  command: "{{galaxy_venv_path}}/bin/python {{galaxy_install_path}}/scripts/manage_db.py -c {{galaxy_config_file}} upgrade install chdir={{galaxy_install_path}}/"
